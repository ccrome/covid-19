# -*- coding: utf-8 -*-
"""COVID-19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/178OGWOd_CX4WigtBwWa6kv7P9KmP5_ut
"""
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import argparse
import subprocess
from datetime import datetime

class NotEnoughCases(Exception):
    pass

def get_args():
    p = argparse.ArgumentParser()
    p.add_argument("-f", "--force", action="store_true", help="Force update plot")
    p.add_argument("-s", "--states", help="States to plot, inaddition to the top n", default=["California", "Ohio", "Idaho"], nargs='+')
    p.add_argument("-c", "--counties", nargs='+', help="Additional Counties to plot",
                   default=["Santa Clara,California",
                            "Marin,California",
                            "Marion,Indiana"]
                   )
    p.add_argument("--nc", "--n-counties", type=int, help="plot top 'n' states/counties", default=10)
    p.add_argument("--ns", "--n-states", type=int, help="plot top 'n' states/counties", default=10)
    p.add_argument("-d", "--days", type=int, help="Number of days to average", default=5)
    args = p.parse_args()
    args.bypass = not args.force
    return args

def update_git(bypass):
    if not os.path.exists("covid-19-data"):
        subprocess.run(["git", "clone", "https://github.com/nytimes/covid-19-data.git"])
    else:
        out = subprocess.run(["git", "pull"], cwd="covid-19-data", capture_output=True)
        if out.stdout.startswith(b'Already up to date.') and bypass:
            print("No Changes")
            exit(0)

def moving_average(x_, w):
    mavg= x_[:w].sum() / w + np.cumsum(x_[w:] - x_[:-w]) / w
    y_ = np.insert(mavg, 0, np.zeros(w))
    return y_

def compute_new_cases(cases, dates, num_days):
    new_cases = cases[1:] - cases[:-1]
    new_cases = np.insert(new_cases, 0, 0)
    mask = new_cases > 0
    new_cases = new_cases[mask]
    cases = cases[mask]
    dates = dates[mask]
    new_cases = moving_average(new_cases, num_days)

    mask = new_cases != 0
    if len(mask) != len(cases):
        raise NotEnoughCases()
    cases = cases[mask]
    new_cases = new_cases[mask]
    dates = dates[mask]
    return cases, new_cases, dates

def plot_state(states, state, axis, num_days, min_cases=10, lineweight=1, offset=1.0, style="-", percent=False):
    dates = states[state]["date"]
    cases = states[state]["cases"]
    cases, new_cases, dates = compute_new_cases(cases, dates, num_days)
    if percent:
        axis.plot(dates, new_cases/cases*100, style, label=state, linewidth=lineweight)
    else:
        axis.loglog(cases, new_cases*offset, style, label=state, linewidth=lineweight)


def plot_county(cases_by_county, county_state, axis, num_days, min_cases=10, lineweight=1, style="-", percent=False):
    cases = cases_by_county[county_state]["cases"]
    dates = cases_by_county[county_state]["date"]
    cases, new_cases, dates = compute_new_cases(cases, dates, num_days)
    county, state = county_state
    if percent:
        axis.plot(dates, new_cases/cases*100, style, label=f"{county}, {state}", linewidth=lineweight)
    else:
        axis.loglog(cases, new_cases, style, label=f"{county}, {state}", linewidth=lineweight)

def df_to_dict_county(df):
    from collections import defaultdict
    county_state_cases = np.array(df[["county", "state", "cases", "deaths", "date"]].values, dtype=str)
    cases_by_county = defaultdict(lambda: {"cases" : [], "deaths" : [], "date" : []})
    [cases_by_county[county, state]["cases"].append(cases)   for county, state, cases, deaths, date in county_state_cases]
    [cases_by_county[county, state]["deaths"].append(deaths) for county, state, cases, deaths, date in county_state_cases]
    [cases_by_county[county, state]["date"].append(date)     for county, state, cases, deaths, date in county_state_cases]
    for k in cases_by_county:
        cases_by_county[k]["cases"] = np.array(cases_by_county[k]["cases"], dtype=float)
        cases_by_county[k]["deaths"] = np.array(cases_by_county[k]["deaths"], dtype=float)
        cases_by_county[k]["date"] = np.array(cases_by_county[k]["date"])
    return cases_by_county

def df_to_dict_state(df):
    from collections import defaultdict
    state_cases = np.array(df[["state", "cases", "deaths", "date"]].values, dtype=str)
    cases_by_state = defaultdict(lambda: {"cases" : [], "deaths" : [], "date" : []})
    [cases_by_state[state]["cases"].append(cases)   for state, cases, deaths, date in state_cases]
    [cases_by_state[state]["deaths"].append(deaths) for state, cases, deaths, date in state_cases]
    [cases_by_state[state]["date"].append(date)     for state, cases, deaths, date in state_cases]
    for k in cases_by_state:
        cases_by_state[k]["cases"]  = np.array(cases_by_state[k]["cases"], dtype=float)
        cases_by_state[k]["deaths"] = np.array(cases_by_state[k]["deaths"], dtype=float)
        cases_by_state[k]["date"]   = np.array(cases_by_state[k]["date"])
    return cases_by_state

def counties_by_num_cases(cases_by_county):
    counties = []
    for k in cases_by_county:
        county, state = k
        n = cases_by_county[k]["cases"][-1]
        counties.append(((county, state), n))
    sorted_county_cases = sorted(counties, key=lambda x: x[1])[::-1]
    sorted_counties = [x[0] for x in sorted_county_cases]
    return sorted_counties

def states_by_num_cases(cases_by_state):
    states = []
    for state in cases_by_state:
        n = cases_by_state[state]["cases"][-1]
        states.append((state, n))
    sorted_state_cases = sorted(states, key=lambda x: x[1])[::-1]
    sorted_states = [x[0] for x in sorted_state_cases]
    return sorted_states

def latest_date(df):
    return df.date.max()

def get_time():
    import pytz
    utc = pytz.timezone('UTC')
    now = utc.localize(datetime.utcnow())
    la = pytz.timezone('America/Los_Angeles')
    local_time = now.astimezone(la)
    return local_time.strftime("%m/%d/%Y, %H:%M:%S %Z")

def parse_counties(county_args):
    """county_args is a list of county,state arguments.  
    Parse them into a list of lists of [[county, state], ...]"""
    c = []
    for county_state in county_args:
        try:
            county, state = county_state.split(",")
            c.append([county, state])
        except ValueError:
            print(f"Couldn't parse {county_state} as a City,State pair.  Please specify counties as a county,state pair.")
            exit(1)
    return c

if __name__=='__main__':
    args = get_args()
    bypass=args.bypass
    update_git(bypass)

    num_counties_to_plot=args.nc
    num_states_to_plot=args.ns
    fig, ((county_0, state_0),(county_1, state_1)) = plt.subplots(nrows=2, ncols=2,figsize=[16, 8])

    df_county = pd.read_csv("covid-19-data/us-counties.csv")
    df_state = pd.read_csv("covid-19-data/us-states.csv")

    cases_by_county = df_to_dict_county(df_county)
    sorted_counties = counties_by_num_cases(cases_by_county)
    for county_state in sorted_counties[:num_counties_to_plot]:
        plot_county(cases_by_county, county_state, num_days = args.days, min_cases=300, axis=county_0, lineweight=2, style="-", percent=True)
        plot_county(cases_by_county, county_state, num_days = args.days, min_cases=300, axis=county_1, lineweight=2, style="-", percent=False)
    for county, state in parse_counties(args.counties):
        county_state = (county, state)
        plot_county(cases_by_county, county_state, num_days = args.days, min_cases=300, axis=county_0, lineweight=4, style="-", percent=True)
        plot_county(cases_by_county, county_state, num_days = args.days, min_cases=300, axis=county_1, lineweight=4, style="-", percent=False)


    cases_by_state = df_to_dict_state(df_state)
    states = states_by_num_cases(cases_by_state)
    my_states=args.states

    base = 1
    exponent = 10
    for state in states[:num_states_to_plot]:
        plot_state(cases_by_state, state, state_0, lineweight=2, num_days=args.days, offset = base**exponent, style="-", percent=True)
        plot_state(cases_by_state, state, state_1, lineweight=2, num_days=args.days, offset = base**exponent, style="-", percent=False)
        exponent += 1
    for state in my_states:
        plot_state(cases_by_state, state, state_0, lineweight=4, num_days=args.days, offset=base**exponent, style="-*", percent=True)
        plot_state(cases_by_state, state, state_1, lineweight=4, num_days=args.days, offset=base**exponent, style="-*", percent=False)
        exponent += 1

    all_axes = [county_0, county_1, state_0, state_1]
    [ax.grid(True) for ax in all_axes]

    county_0.set_xlabel("Date")
    county_0.set_title(f"Top {num_counties_to_plot} counties in the USA, by number of cases, as of {latest_date(df_county)}\nScript last run {get_time()}")
    county_0.legend(loc="upper left")

    state_0.set_xlabel("Date")
    state_0.set_title(f"Top {num_states_to_plot} states, as of {latest_date(df_state)}\nScript last run {get_time()}")
    state_0.legend(loc="upper left")

    state_1.set_title(f"Top {num_states_to_plot} states, as of {latest_date(df_state)}\nScript last run {get_time()}")
    state_1.set_xlabel("Total Cases")

    county_0.set_ylabel(f"Growth Rate per day (%), averaged over {args.days} days")
    state_0.set_ylabel(f"Growth Rate per day (%), averaged over {args.days} days")
    county_0.set_ylim(0, 40)
    state_0.set_ylim(0, 40)

    county_1.set_ylabel(f"New Cases per day, averaged over {args.days} days")
    state_1.set_ylabel(f"New Cases per day, averaged over {args.days} days")
    county_1.set_ylim(10**0, 10**4)
    state_1.set_ylim(10**0, 10**4)
    fig.savefig("covid_plot.jpg")
    plt.show()
